#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.6.1 (swiftlang-5.6.0.323.66 clang-1316.0.20.12)
#ifndef GESTUREDECKIOS_SWIFT_H
#define GESTUREDECKIOS_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import ObjectiveC;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="GesturedeckiOS",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@class UIPanGestureRecognizer;
enum PanSensitivity : NSInteger;
@class UILongPressGestureRecognizer;
@class UIViewController;
@class NSString;

/// This is the low-level API that allows you to build custom functionalities on top of Gesturedeck, with seamless callbacks for Gesturedeck’s gestures.
/// The library provides callbacks for each gesture, allowing developers to perform custom actions in response to user input.
/// It allows developers to easily add support for multi-finger and single-finger gestures such as taps, swipes, pans, and long presses to their apps, that are active on top of the entire UI and do not interfere with the apps’ UI elements.
/// To use Gesturedeck, create an instance of the <code>Gesturedeck</code> class and pass in the required parameters. When a gesture is detected, the corresponding callback will be invoked.
/// Gesturedeck requires an activation key to remove watermarks. The activation key can be obtained by contacting Navideck, the creators of Gesturedeck. The watermarked mode is available for free for developers who want to use it without setting an activation key.
SWIFT_CLASS("_TtC14GesturedeckiOS11Gesturedeck")
@interface Gesturedeck : NSObject
/// A closure that is called when a tap gesture is recognized.
@property (nonatomic, copy) void (^ _Nullable tapAction)(void);
/// A closure that is called when a left swipe gesture is recognized.
@property (nonatomic, copy) void (^ _Nullable swipeLeftAction)(void);
/// A closure that is called when a right swipe gesture is recognized.
@property (nonatomic, copy) void (^ _Nullable swipeRightAction)(void);
/// A closure that is called when a pan gesture is recognized.
@property (nonatomic, copy) void (^ _Nullable panAction)(UIPanGestureRecognizer * _Nonnull);
/// The sensitivity of the pan gestures.
@property (nonatomic) enum PanSensitivity panSensitivity;
/// A closure that is called when a long press gesture is recognized.
@property (nonatomic, copy) void (^ _Nullable longPressAction)(UILongPressGestureRecognizer * _Nonnull);
/// Initializes a new instance of the <code>Gesturedeck</code> class.
/// \param hostViewController The view controller that the gesture recognizer is attached to. Defaults to <code>nil</code>.
///
/// \param tapAction A closure that is called when a tap gesture is recognized. Defaults to <code>nil</code>.
///
/// \param swipeLeftAction A closure that is called when a left swipe gesture is recognized. Defaults to <code>nil</code>.
///
/// \param swipeRightAction A closure that is called when a right swipe gesture is recognized. Defaults to <code>nil</code>.
///
/// \param panAction A closure that is called when a pan gesture is recognized. Defaults to <code>nil</code>.
///
/// \param panSensitivity The sensitivity of the pan gestures. Defaults to <code>.medium</code>.
///
/// \param longPressAction The action to perform when the user long presses the screen. Defaults to <code>nil</code>.
///
/// \param autoStart A boolean indicating whether to automatically start recognizing gestures after initialization. Defaults to <code>true</code>.
///
/// \param activationKey An optional activation key to remove watermarks. If not provided, Gesturedeck will present a watermark. Defaults to <code>nil</code>.
///
- (nonnull instancetype)initOn:(UIViewController * _Nullable)hostViewController tapAction:(void (^ _Nullable)(void))tapAction swipeLeftAction:(void (^ _Nullable)(void))swipeLeftAction swipeRightAction:(void (^ _Nullable)(void))swipeRightAction panAction:(void (^ _Nullable)(UIPanGestureRecognizer * _Nonnull))panAction panSensitivity:(enum PanSensitivity)panSensitivity longPressAction:(void (^ _Nullable)(UILongPressGestureRecognizer * _Nonnull))longPressAction autoStart:(BOOL)autoStart activationKey:(NSString * _Nullable)activationKey OBJC_DESIGNATED_INITIALIZER;
/// A convenience initializer for the <code>Gesturedeck</code> class. You need to set the actions for the corresponsing gestures after initializing.
- (nonnull instancetype)init;
/// Starts the gesture recognizer.
- (void)start;
/// Stops the gesture recognizer.
- (void)stop;
/// Determines whether the gesture recognizer is active.
@property (nonatomic, readonly) BOOL isActive;
@end

@class UIGestureRecognizer;

@interface Gesturedeck (SWIFT_EXTENSION(GesturedeckiOS)) <UIGestureRecognizerDelegate>
- (BOOL)gestureRecognizer:(UIGestureRecognizer * _Nonnull)gestureRecognizer shouldRecognizeSimultaneouslyWithGestureRecognizer:(UIGestureRecognizer * _Nonnull)otherGestureRecognizer SWIFT_WARN_UNUSED_RESULT;
- (BOOL)gestureRecognizerShouldBegin:(UIGestureRecognizer * _Nonnull)panGestureRecognizer SWIFT_WARN_UNUSED_RESULT;
@end

@class GesturedeckMediaOverlay;

/// A subclass of Gesturedeck that provides media-specific functionality such as volume control and media playback actions.
/// Gesturedeck also includes support for media overlays, which can be used to display additional information or controls on top of the app’s content.
SWIFT_CLASS("_TtC14GesturedeckiOS16GesturedeckMedia")
@interface GesturedeckMedia : Gesturedeck
/// The overlay view that displays media-related gestures.
@property (nonatomic, strong) GesturedeckMediaOverlay * _Nonnull gesturedeckMediaOverlay;
/// Initializes a new instance of GesturedeckMedia.
/// You can initialize GesturedeckMedia without any arguments and have start/stop, skip next/previous and volume up/down work out of the box.
/// \param on The view controller on which to add the gesture recognizer. Defaults to <code>nil</code>.
///
/// \param tapAction The action to perform when the user taps the screen. Defaults to <code>nil</code>.
///
/// \param swipeLeftAction The action to perform when the user swipes left. Defaults to <code>nil</code>.
///
/// \param swipeRightAction The action to perform when the user swipes right. Defaults to <code>nil</code>.
///
/// \param panAction The action to perform when the user pans the screen. Defaults to <code>nil</code>.
///
/// \param panSensitivity The sensitivity of the pan gestures. Defaults to <code>.medium</code>.
///
/// \param longPressAction The action to perform when the user long presses the screen. Defaults to <code>nil</code>.
///
/// \param autoStart A boolean indicating whether to automatically start recognizing gestures after initialization. Defaults to <code>true</code>.
///
/// \param gesturedeckMediaOverlay The overlay view that displays media-related gestures. If you pass nil then the default GesturedeckMediaOverlay is used. Defaults to <code>nil</code>.
///
/// \param activationKey An optional activation key to remove watermarks. If not provided, Gesturedeck will present a watermark. Defaults to <code>nil</code>.
///
- (nonnull instancetype)initOn:(UIViewController * _Nullable)on tapAction:(void (^ _Nullable)(void))tapAction swipeLeftAction:(void (^ _Nullable)(void))swipeLeftAction swipeRightAction:(void (^ _Nullable)(void))swipeRightAction panAction:(void (^ _Nullable)(UIPanGestureRecognizer * _Nonnull))panAction panSensitivity:(enum PanSensitivity)panSensitivity longPressAction:(void (^ _Nullable)(UILongPressGestureRecognizer * _Nonnull))longPressAction autoStart:(BOOL)autoStart gesturedeckMediaOverlay:(GesturedeckMediaOverlay * _Nullable)gesturedeckMediaOverlay activationKey:(NSString * _Nullable)activationKey OBJC_DESIGNATED_INITIALIZER;
/// A convenience initializer for the <code>GesturedeckMedia</code> class.
/// You can initialize GesturedeckMedia without any arguments and have start/stop, skip next/previous and volume up/down work out of the box.
/// Note that due to iOS limitations, skip next/previous only works for the system media player.
- (nonnull instancetype)init;
- (void)start;
- (void)stop;
@property (nonatomic, readonly) BOOL isActive;
- (nonnull instancetype)initOn:(UIViewController * _Nullable)hostViewController tapAction:(void (^ _Nullable)(void))tapAction swipeLeftAction:(void (^ _Nullable)(void))swipeLeftAction swipeRightAction:(void (^ _Nullable)(void))swipeRightAction panAction:(void (^ _Nullable)(UIPanGestureRecognizer * _Nonnull))panAction panSensitivity:(enum PanSensitivity)panSensitivity longPressAction:(void (^ _Nullable)(UILongPressGestureRecognizer * _Nonnull))longPressAction autoStart:(BOOL)autoStart activationKey:(NSString * _Nullable)activationKey SWIFT_UNAVAILABLE;
@end

@class UIColor;
@class UIImage;

/// A struct that represents the media overlay for Gesturedeck.
SWIFT_CLASS("_TtC14GesturedeckiOS23GesturedeckMediaOverlay")
@interface GesturedeckMediaOverlay : NSObject
/// The tint color of the media overlay.
@property (nonatomic, strong) UIColor * _Nullable tintColor;
/// The background color of the media overlay
@property (nonatomic, strong) UIColor * _Nullable backgroundColor;
/// The top icon of the media overlay.
@property (nonatomic, strong) UIImage * _Nullable topIcon;
/// The icon for tapping on the media overlay.
@property (nonatomic, strong) UIImage * _Nullable iconTap;
/// The icon for toggling the tap on the media overlay.
@property (nonatomic, strong) UIImage * _Nullable iconTapToggled;
/// The icon for swiping left on the media overlay.
@property (nonatomic, strong) UIImage * _Nullable iconSwipeLeft;
/// The icon for swiping right on the media overlay.
@property (nonatomic, strong) UIImage * _Nullable iconSwipeRight;
/// A Boolean value that determines whether horizontal swipes are reversed.
@property (nonatomic) BOOL reverseHorizontalSwipes;
/// A Boolean value that determines whether the center icon shows the outer ring.
@property (nonatomic) BOOL centerIconShowsOuterRing;
/// Initializes a new instance of the <code>GesturedeckMediaOverlay</code> struct.
/// \param tintColor The tint color of the media overlay.
///
/// \param backgroundColor The background color of the media overlay
///
/// \param topIcon The top icon of the media overlay.
///
/// \param iconTap The icon for tapping on the media overlay.
///
/// \param iconTapToggled The icon for toggling the tap on the media overlay.
///
/// \param iconSwipeLeft The icon for swiping left on the media overlay.
///
/// \param iconSwipeRight The icon for swiping right on the media overlay.
///
/// \param reverseHorizontalSwipes A Boolean value that determines whether horizontal swipes are reversed.
///
/// \param centerIconShowsOuterRing A Boolean value that determines whether the center icon shows the outer ring.
///
- (nonnull instancetype)initWithTintColor:(UIColor * _Nullable)tintColor backgroundColor:(UIColor * _Nullable)backgroundColor topIcon:(UIImage * _Nullable)topIcon iconTap:(UIImage * _Nullable)iconTap iconTapToggled:(UIImage * _Nullable)iconTapToggled iconSwipeLeft:(UIImage * _Nullable)iconSwipeLeft iconSwipeRight:(UIImage * _Nullable)iconSwipeRight reverseHorizontalSwipes:(BOOL)reverseHorizontalSwipes centerIconShowsOuterRing:(BOOL)centerIconShowsOuterRing OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, PanSensitivity, open) {
  PanSensitivityLow = 100,
  PanSensitivityMedium = 20,
  PanSensitivityHigh = 0,
};



#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#elif defined(__x86_64__) && __x86_64__
// Generated by Apple Swift version 5.6.1 (swiftlang-5.6.0.323.66 clang-1316.0.20.12)
#ifndef GESTUREDECKIOS_SWIFT_H
#define GESTUREDECKIOS_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import ObjectiveC;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="GesturedeckiOS",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@class UIPanGestureRecognizer;
enum PanSensitivity : NSInteger;
@class UILongPressGestureRecognizer;
@class UIViewController;
@class NSString;

/// This is the low-level API that allows you to build custom functionalities on top of Gesturedeck, with seamless callbacks for Gesturedeck’s gestures.
/// The library provides callbacks for each gesture, allowing developers to perform custom actions in response to user input.
/// It allows developers to easily add support for multi-finger and single-finger gestures such as taps, swipes, pans, and long presses to their apps, that are active on top of the entire UI and do not interfere with the apps’ UI elements.
/// To use Gesturedeck, create an instance of the <code>Gesturedeck</code> class and pass in the required parameters. When a gesture is detected, the corresponding callback will be invoked.
/// Gesturedeck requires an activation key to remove watermarks. The activation key can be obtained by contacting Navideck, the creators of Gesturedeck. The watermarked mode is available for free for developers who want to use it without setting an activation key.
SWIFT_CLASS("_TtC14GesturedeckiOS11Gesturedeck")
@interface Gesturedeck : NSObject
/// A closure that is called when a tap gesture is recognized.
@property (nonatomic, copy) void (^ _Nullable tapAction)(void);
/// A closure that is called when a left swipe gesture is recognized.
@property (nonatomic, copy) void (^ _Nullable swipeLeftAction)(void);
/// A closure that is called when a right swipe gesture is recognized.
@property (nonatomic, copy) void (^ _Nullable swipeRightAction)(void);
/// A closure that is called when a pan gesture is recognized.
@property (nonatomic, copy) void (^ _Nullable panAction)(UIPanGestureRecognizer * _Nonnull);
/// The sensitivity of the pan gestures.
@property (nonatomic) enum PanSensitivity panSensitivity;
/// A closure that is called when a long press gesture is recognized.
@property (nonatomic, copy) void (^ _Nullable longPressAction)(UILongPressGestureRecognizer * _Nonnull);
/// Initializes a new instance of the <code>Gesturedeck</code> class.
/// \param hostViewController The view controller that the gesture recognizer is attached to. Defaults to <code>nil</code>.
///
/// \param tapAction A closure that is called when a tap gesture is recognized. Defaults to <code>nil</code>.
///
/// \param swipeLeftAction A closure that is called when a left swipe gesture is recognized. Defaults to <code>nil</code>.
///
/// \param swipeRightAction A closure that is called when a right swipe gesture is recognized. Defaults to <code>nil</code>.
///
/// \param panAction A closure that is called when a pan gesture is recognized. Defaults to <code>nil</code>.
///
/// \param panSensitivity The sensitivity of the pan gestures. Defaults to <code>.medium</code>.
///
/// \param longPressAction The action to perform when the user long presses the screen. Defaults to <code>nil</code>.
///
/// \param autoStart A boolean indicating whether to automatically start recognizing gestures after initialization. Defaults to <code>true</code>.
///
/// \param activationKey An optional activation key to remove watermarks. If not provided, Gesturedeck will present a watermark. Defaults to <code>nil</code>.
///
- (nonnull instancetype)initOn:(UIViewController * _Nullable)hostViewController tapAction:(void (^ _Nullable)(void))tapAction swipeLeftAction:(void (^ _Nullable)(void))swipeLeftAction swipeRightAction:(void (^ _Nullable)(void))swipeRightAction panAction:(void (^ _Nullable)(UIPanGestureRecognizer * _Nonnull))panAction panSensitivity:(enum PanSensitivity)panSensitivity longPressAction:(void (^ _Nullable)(UILongPressGestureRecognizer * _Nonnull))longPressAction autoStart:(BOOL)autoStart activationKey:(NSString * _Nullable)activationKey OBJC_DESIGNATED_INITIALIZER;
/// A convenience initializer for the <code>Gesturedeck</code> class. You need to set the actions for the corresponsing gestures after initializing.
- (nonnull instancetype)init;
/// Starts the gesture recognizer.
- (void)start;
/// Stops the gesture recognizer.
- (void)stop;
/// Determines whether the gesture recognizer is active.
@property (nonatomic, readonly) BOOL isActive;
@end

@class UIGestureRecognizer;

@interface Gesturedeck (SWIFT_EXTENSION(GesturedeckiOS)) <UIGestureRecognizerDelegate>
- (BOOL)gestureRecognizer:(UIGestureRecognizer * _Nonnull)gestureRecognizer shouldRecognizeSimultaneouslyWithGestureRecognizer:(UIGestureRecognizer * _Nonnull)otherGestureRecognizer SWIFT_WARN_UNUSED_RESULT;
- (BOOL)gestureRecognizerShouldBegin:(UIGestureRecognizer * _Nonnull)panGestureRecognizer SWIFT_WARN_UNUSED_RESULT;
@end

@class GesturedeckMediaOverlay;

/// A subclass of Gesturedeck that provides media-specific functionality such as volume control and media playback actions.
/// Gesturedeck also includes support for media overlays, which can be used to display additional information or controls on top of the app’s content.
SWIFT_CLASS("_TtC14GesturedeckiOS16GesturedeckMedia")
@interface GesturedeckMedia : Gesturedeck
/// The overlay view that displays media-related gestures.
@property (nonatomic, strong) GesturedeckMediaOverlay * _Nonnull gesturedeckMediaOverlay;
/// Initializes a new instance of GesturedeckMedia.
/// You can initialize GesturedeckMedia without any arguments and have start/stop, skip next/previous and volume up/down work out of the box.
/// \param on The view controller on which to add the gesture recognizer. Defaults to <code>nil</code>.
///
/// \param tapAction The action to perform when the user taps the screen. Defaults to <code>nil</code>.
///
/// \param swipeLeftAction The action to perform when the user swipes left. Defaults to <code>nil</code>.
///
/// \param swipeRightAction The action to perform when the user swipes right. Defaults to <code>nil</code>.
///
/// \param panAction The action to perform when the user pans the screen. Defaults to <code>nil</code>.
///
/// \param panSensitivity The sensitivity of the pan gestures. Defaults to <code>.medium</code>.
///
/// \param longPressAction The action to perform when the user long presses the screen. Defaults to <code>nil</code>.
///
/// \param autoStart A boolean indicating whether to automatically start recognizing gestures after initialization. Defaults to <code>true</code>.
///
/// \param gesturedeckMediaOverlay The overlay view that displays media-related gestures. If you pass nil then the default GesturedeckMediaOverlay is used. Defaults to <code>nil</code>.
///
/// \param activationKey An optional activation key to remove watermarks. If not provided, Gesturedeck will present a watermark. Defaults to <code>nil</code>.
///
- (nonnull instancetype)initOn:(UIViewController * _Nullable)on tapAction:(void (^ _Nullable)(void))tapAction swipeLeftAction:(void (^ _Nullable)(void))swipeLeftAction swipeRightAction:(void (^ _Nullable)(void))swipeRightAction panAction:(void (^ _Nullable)(UIPanGestureRecognizer * _Nonnull))panAction panSensitivity:(enum PanSensitivity)panSensitivity longPressAction:(void (^ _Nullable)(UILongPressGestureRecognizer * _Nonnull))longPressAction autoStart:(BOOL)autoStart gesturedeckMediaOverlay:(GesturedeckMediaOverlay * _Nullable)gesturedeckMediaOverlay activationKey:(NSString * _Nullable)activationKey OBJC_DESIGNATED_INITIALIZER;
/// A convenience initializer for the <code>GesturedeckMedia</code> class.
/// You can initialize GesturedeckMedia without any arguments and have start/stop, skip next/previous and volume up/down work out of the box.
/// Note that due to iOS limitations, skip next/previous only works for the system media player.
- (nonnull instancetype)init;
- (void)start;
- (void)stop;
@property (nonatomic, readonly) BOOL isActive;
- (nonnull instancetype)initOn:(UIViewController * _Nullable)hostViewController tapAction:(void (^ _Nullable)(void))tapAction swipeLeftAction:(void (^ _Nullable)(void))swipeLeftAction swipeRightAction:(void (^ _Nullable)(void))swipeRightAction panAction:(void (^ _Nullable)(UIPanGestureRecognizer * _Nonnull))panAction panSensitivity:(enum PanSensitivity)panSensitivity longPressAction:(void (^ _Nullable)(UILongPressGestureRecognizer * _Nonnull))longPressAction autoStart:(BOOL)autoStart activationKey:(NSString * _Nullable)activationKey SWIFT_UNAVAILABLE;
@end

@class UIColor;
@class UIImage;

/// A struct that represents the media overlay for Gesturedeck.
SWIFT_CLASS("_TtC14GesturedeckiOS23GesturedeckMediaOverlay")
@interface GesturedeckMediaOverlay : NSObject
/// The tint color of the media overlay.
@property (nonatomic, strong) UIColor * _Nullable tintColor;
/// The background color of the media overlay
@property (nonatomic, strong) UIColor * _Nullable backgroundColor;
/// The top icon of the media overlay.
@property (nonatomic, strong) UIImage * _Nullable topIcon;
/// The icon for tapping on the media overlay.
@property (nonatomic, strong) UIImage * _Nullable iconTap;
/// The icon for toggling the tap on the media overlay.
@property (nonatomic, strong) UIImage * _Nullable iconTapToggled;
/// The icon for swiping left on the media overlay.
@property (nonatomic, strong) UIImage * _Nullable iconSwipeLeft;
/// The icon for swiping right on the media overlay.
@property (nonatomic, strong) UIImage * _Nullable iconSwipeRight;
/// A Boolean value that determines whether horizontal swipes are reversed.
@property (nonatomic) BOOL reverseHorizontalSwipes;
/// A Boolean value that determines whether the center icon shows the outer ring.
@property (nonatomic) BOOL centerIconShowsOuterRing;
/// Initializes a new instance of the <code>GesturedeckMediaOverlay</code> struct.
/// \param tintColor The tint color of the media overlay.
///
/// \param backgroundColor The background color of the media overlay
///
/// \param topIcon The top icon of the media overlay.
///
/// \param iconTap The icon for tapping on the media overlay.
///
/// \param iconTapToggled The icon for toggling the tap on the media overlay.
///
/// \param iconSwipeLeft The icon for swiping left on the media overlay.
///
/// \param iconSwipeRight The icon for swiping right on the media overlay.
///
/// \param reverseHorizontalSwipes A Boolean value that determines whether horizontal swipes are reversed.
///
/// \param centerIconShowsOuterRing A Boolean value that determines whether the center icon shows the outer ring.
///
- (nonnull instancetype)initWithTintColor:(UIColor * _Nullable)tintColor backgroundColor:(UIColor * _Nullable)backgroundColor topIcon:(UIImage * _Nullable)topIcon iconTap:(UIImage * _Nullable)iconTap iconTapToggled:(UIImage * _Nullable)iconTapToggled iconSwipeLeft:(UIImage * _Nullable)iconSwipeLeft iconSwipeRight:(UIImage * _Nullable)iconSwipeRight reverseHorizontalSwipes:(BOOL)reverseHorizontalSwipes centerIconShowsOuterRing:(BOOL)centerIconShowsOuterRing OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, PanSensitivity, open) {
  PanSensitivityLow = 100,
  PanSensitivityMedium = 20,
  PanSensitivityHigh = 0,
};



#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#elif defined(__i386__) && __i386__
// Generated by Apple Swift version 5.6.1 (swiftlang-5.6.0.323.66 clang-1316.0.20.12)
#ifndef GESTUREDECKIOS_SWIFT_H
#define GESTUREDECKIOS_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import ObjectiveC;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="GesturedeckiOS",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@class UIPanGestureRecognizer;
enum PanSensitivity : NSInteger;
@class UILongPressGestureRecognizer;
@class UIViewController;
@class NSString;

/// This is the low-level API that allows you to build custom functionalities on top of Gesturedeck, with seamless callbacks for Gesturedeck’s gestures.
/// The library provides callbacks for each gesture, allowing developers to perform custom actions in response to user input.
/// It allows developers to easily add support for multi-finger and single-finger gestures such as taps, swipes, pans, and long presses to their apps, that are active on top of the entire UI and do not interfere with the apps’ UI elements.
/// To use Gesturedeck, create an instance of the <code>Gesturedeck</code> class and pass in the required parameters. When a gesture is detected, the corresponding callback will be invoked.
/// Gesturedeck requires an activation key to remove watermarks. The activation key can be obtained by contacting Navideck, the creators of Gesturedeck. The watermarked mode is available for free for developers who want to use it without setting an activation key.
SWIFT_CLASS("_TtC14GesturedeckiOS11Gesturedeck")
@interface Gesturedeck : NSObject
/// A closure that is called when a tap gesture is recognized.
@property (nonatomic, copy) void (^ _Nullable tapAction)(void);
/// A closure that is called when a left swipe gesture is recognized.
@property (nonatomic, copy) void (^ _Nullable swipeLeftAction)(void);
/// A closure that is called when a right swipe gesture is recognized.
@property (nonatomic, copy) void (^ _Nullable swipeRightAction)(void);
/// A closure that is called when a pan gesture is recognized.
@property (nonatomic, copy) void (^ _Nullable panAction)(UIPanGestureRecognizer * _Nonnull);
/// The sensitivity of the pan gestures.
@property (nonatomic) enum PanSensitivity panSensitivity;
/// A closure that is called when a long press gesture is recognized.
@property (nonatomic, copy) void (^ _Nullable longPressAction)(UILongPressGestureRecognizer * _Nonnull);
/// Initializes a new instance of the <code>Gesturedeck</code> class.
/// \param hostViewController The view controller that the gesture recognizer is attached to. Defaults to <code>nil</code>.
///
/// \param tapAction A closure that is called when a tap gesture is recognized. Defaults to <code>nil</code>.
///
/// \param swipeLeftAction A closure that is called when a left swipe gesture is recognized. Defaults to <code>nil</code>.
///
/// \param swipeRightAction A closure that is called when a right swipe gesture is recognized. Defaults to <code>nil</code>.
///
/// \param panAction A closure that is called when a pan gesture is recognized. Defaults to <code>nil</code>.
///
/// \param panSensitivity The sensitivity of the pan gestures. Defaults to <code>.medium</code>.
///
/// \param longPressAction The action to perform when the user long presses the screen. Defaults to <code>nil</code>.
///
/// \param autoStart A boolean indicating whether to automatically start recognizing gestures after initialization. Defaults to <code>true</code>.
///
/// \param activationKey An optional activation key to remove watermarks. If not provided, Gesturedeck will present a watermark. Defaults to <code>nil</code>.
///
- (nonnull instancetype)initOn:(UIViewController * _Nullable)hostViewController tapAction:(void (^ _Nullable)(void))tapAction swipeLeftAction:(void (^ _Nullable)(void))swipeLeftAction swipeRightAction:(void (^ _Nullable)(void))swipeRightAction panAction:(void (^ _Nullable)(UIPanGestureRecognizer * _Nonnull))panAction panSensitivity:(enum PanSensitivity)panSensitivity longPressAction:(void (^ _Nullable)(UILongPressGestureRecognizer * _Nonnull))longPressAction autoStart:(BOOL)autoStart activationKey:(NSString * _Nullable)activationKey OBJC_DESIGNATED_INITIALIZER;
/// A convenience initializer for the <code>Gesturedeck</code> class. You need to set the actions for the corresponsing gestures after initializing.
- (nonnull instancetype)init;
/// Starts the gesture recognizer.
- (void)start;
/// Stops the gesture recognizer.
- (void)stop;
/// Determines whether the gesture recognizer is active.
@property (nonatomic, readonly) BOOL isActive;
@end

@class UIGestureRecognizer;

@interface Gesturedeck (SWIFT_EXTENSION(GesturedeckiOS)) <UIGestureRecognizerDelegate>
- (BOOL)gestureRecognizer:(UIGestureRecognizer * _Nonnull)gestureRecognizer shouldRecognizeSimultaneouslyWithGestureRecognizer:(UIGestureRecognizer * _Nonnull)otherGestureRecognizer SWIFT_WARN_UNUSED_RESULT;
- (BOOL)gestureRecognizerShouldBegin:(UIGestureRecognizer * _Nonnull)panGestureRecognizer SWIFT_WARN_UNUSED_RESULT;
@end

@class GesturedeckMediaOverlay;

/// A subclass of Gesturedeck that provides media-specific functionality such as volume control and media playback actions.
/// Gesturedeck also includes support for media overlays, which can be used to display additional information or controls on top of the app’s content.
SWIFT_CLASS("_TtC14GesturedeckiOS16GesturedeckMedia")
@interface GesturedeckMedia : Gesturedeck
/// The overlay view that displays media-related gestures.
@property (nonatomic, strong) GesturedeckMediaOverlay * _Nonnull gesturedeckMediaOverlay;
/// Initializes a new instance of GesturedeckMedia.
/// You can initialize GesturedeckMedia without any arguments and have start/stop, skip next/previous and volume up/down work out of the box.
/// \param on The view controller on which to add the gesture recognizer. Defaults to <code>nil</code>.
///
/// \param tapAction The action to perform when the user taps the screen. Defaults to <code>nil</code>.
///
/// \param swipeLeftAction The action to perform when the user swipes left. Defaults to <code>nil</code>.
///
/// \param swipeRightAction The action to perform when the user swipes right. Defaults to <code>nil</code>.
///
/// \param panAction The action to perform when the user pans the screen. Defaults to <code>nil</code>.
///
/// \param panSensitivity The sensitivity of the pan gestures. Defaults to <code>.medium</code>.
///
/// \param longPressAction The action to perform when the user long presses the screen. Defaults to <code>nil</code>.
///
/// \param autoStart A boolean indicating whether to automatically start recognizing gestures after initialization. Defaults to <code>true</code>.
///
/// \param gesturedeckMediaOverlay The overlay view that displays media-related gestures. If you pass nil then the default GesturedeckMediaOverlay is used. Defaults to <code>nil</code>.
///
/// \param activationKey An optional activation key to remove watermarks. If not provided, Gesturedeck will present a watermark. Defaults to <code>nil</code>.
///
- (nonnull instancetype)initOn:(UIViewController * _Nullable)on tapAction:(void (^ _Nullable)(void))tapAction swipeLeftAction:(void (^ _Nullable)(void))swipeLeftAction swipeRightAction:(void (^ _Nullable)(void))swipeRightAction panAction:(void (^ _Nullable)(UIPanGestureRecognizer * _Nonnull))panAction panSensitivity:(enum PanSensitivity)panSensitivity longPressAction:(void (^ _Nullable)(UILongPressGestureRecognizer * _Nonnull))longPressAction autoStart:(BOOL)autoStart gesturedeckMediaOverlay:(GesturedeckMediaOverlay * _Nullable)gesturedeckMediaOverlay activationKey:(NSString * _Nullable)activationKey OBJC_DESIGNATED_INITIALIZER;
/// A convenience initializer for the <code>GesturedeckMedia</code> class.
/// You can initialize GesturedeckMedia without any arguments and have start/stop, skip next/previous and volume up/down work out of the box.
/// Note that due to iOS limitations, skip next/previous only works for the system media player.
- (nonnull instancetype)init;
- (void)start;
- (void)stop;
@property (nonatomic, readonly) BOOL isActive;
- (nonnull instancetype)initOn:(UIViewController * _Nullable)hostViewController tapAction:(void (^ _Nullable)(void))tapAction swipeLeftAction:(void (^ _Nullable)(void))swipeLeftAction swipeRightAction:(void (^ _Nullable)(void))swipeRightAction panAction:(void (^ _Nullable)(UIPanGestureRecognizer * _Nonnull))panAction panSensitivity:(enum PanSensitivity)panSensitivity longPressAction:(void (^ _Nullable)(UILongPressGestureRecognizer * _Nonnull))longPressAction autoStart:(BOOL)autoStart activationKey:(NSString * _Nullable)activationKey SWIFT_UNAVAILABLE;
@end

@class UIColor;
@class UIImage;

/// A struct that represents the media overlay for Gesturedeck.
SWIFT_CLASS("_TtC14GesturedeckiOS23GesturedeckMediaOverlay")
@interface GesturedeckMediaOverlay : NSObject
/// The tint color of the media overlay.
@property (nonatomic, strong) UIColor * _Nullable tintColor;
/// The background color of the media overlay
@property (nonatomic, strong) UIColor * _Nullable backgroundColor;
/// The top icon of the media overlay.
@property (nonatomic, strong) UIImage * _Nullable topIcon;
/// The icon for tapping on the media overlay.
@property (nonatomic, strong) UIImage * _Nullable iconTap;
/// The icon for toggling the tap on the media overlay.
@property (nonatomic, strong) UIImage * _Nullable iconTapToggled;
/// The icon for swiping left on the media overlay.
@property (nonatomic, strong) UIImage * _Nullable iconSwipeLeft;
/// The icon for swiping right on the media overlay.
@property (nonatomic, strong) UIImage * _Nullable iconSwipeRight;
/// A Boolean value that determines whether horizontal swipes are reversed.
@property (nonatomic) BOOL reverseHorizontalSwipes;
/// A Boolean value that determines whether the center icon shows the outer ring.
@property (nonatomic) BOOL centerIconShowsOuterRing;
/// Initializes a new instance of the <code>GesturedeckMediaOverlay</code> struct.
/// \param tintColor The tint color of the media overlay.
///
/// \param backgroundColor The background color of the media overlay
///
/// \param topIcon The top icon of the media overlay.
///
/// \param iconTap The icon for tapping on the media overlay.
///
/// \param iconTapToggled The icon for toggling the tap on the media overlay.
///
/// \param iconSwipeLeft The icon for swiping left on the media overlay.
///
/// \param iconSwipeRight The icon for swiping right on the media overlay.
///
/// \param reverseHorizontalSwipes A Boolean value that determines whether horizontal swipes are reversed.
///
/// \param centerIconShowsOuterRing A Boolean value that determines whether the center icon shows the outer ring.
///
- (nonnull instancetype)initWithTintColor:(UIColor * _Nullable)tintColor backgroundColor:(UIColor * _Nullable)backgroundColor topIcon:(UIImage * _Nullable)topIcon iconTap:(UIImage * _Nullable)iconTap iconTapToggled:(UIImage * _Nullable)iconTapToggled iconSwipeLeft:(UIImage * _Nullable)iconSwipeLeft iconSwipeRight:(UIImage * _Nullable)iconSwipeRight reverseHorizontalSwipes:(BOOL)reverseHorizontalSwipes centerIconShowsOuterRing:(BOOL)centerIconShowsOuterRing OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, PanSensitivity, open) {
  PanSensitivityLow = 100,
  PanSensitivityMedium = 20,
  PanSensitivityHigh = 0,
};



#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#endif
